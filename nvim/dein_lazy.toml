# ============================================================================
# Complement
# ============================================================================
[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-register'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'


[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-commands.vim'
on_source ='ddu.vim'

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
hook_source = '''
call ddu#custom#patch_global({
  \  'ui': 'ff',
  \  'sources': [
  \    {'name': 'file', 'params': {}},
  \    {'name': 'file_rec', 'params': {}},
  \    {'name': 'register', 'params': {}},
  \  ],
  \  'sourceOptions': {
  \    '_': {
  \      'matchers': ['matcher_substring'],
  \    },
  \    'file_rec': {'path': expand("~")},
  \  },
  \  'kindOptions': {
  \    'file': {
  \      'defaultAction': 'open',
  \    },
  \  },
  \})
'''

# ============================================================================
# Complement
# ============================================================================
[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
call ddc#custom#patch_global('sources', ['around', 'buffer'])
call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \ 'matchers': ['matcher_head'],
    \ 'sorters': ['sorter_rank'],
    \ 'converters': ['converter_remove_overlap'],
    \ },
    \ 'around': {'mark': 'A'},
    \ 'buffer': {'mark': 'B'},
    \ })
call ddc#custom#patch_global('sourceParams', {
    \ 'around': {'maxSize': 500},
    \ 'buffer': {
    \     'requireSameFiletype': v:false,
    \     'limitBytes': 5000000,
    \     'fromAltBuf': v:true,
    \     'forceCollect': v:true,
    \   }
    \ })

" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ ddc#map#pum_visible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

" Use ddc.
call ddc#enable()
'''

# ============================================================================
# Syntax
# ============================================================================
[[plugins]]
repo = 'othree/html5.vim'
on_ft = [ 'html', 'vue' ]

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css', 'scss', 'sass']

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = ['jsx']

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = 'scss'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = ['slim']

[[plugins]]
repo = 'tpope/vim-haml'
on_ft = ['haml']

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = 'pug'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = [ 'toml' ]

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['css', 'scss', 'html', 'vue']
hook_add = '''
let g:user_emmet_settings = {
\  'variables': {'lang': 'ja'},
\  'html': {
\    'default_attributes': {
\      'option': {'value': v:null},
\      'textarea': {'id': v:null, 'name': v:null, 'cols': 10, 'rows': 10},
\    },
\    'snippets': {
\      'html:5': "<!DOCTYPE html>\n"
\              ."<html lang=\"${lang}\">\n"
\              ."<head>\n"
\              ."\t<meta charset=\"${charset}\">\n"
\              ."\t<title></title>\n"
\              ."\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
\              ."</head>\n"
\              ."<body>\n\t${child}|\n</body>\n"
\              ."</html>",
\    },
\  },
\}
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown', 'md']
hook_post_source = '''
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
'''
