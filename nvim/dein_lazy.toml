# ============================================================================
# User Interface
# ============================================================================
[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
hook_add = '''
nnoremap s<Space> <Cmd>Ddu file file_rec -ui-param-startFilter=v:true<CR>
nnoremap b<Space> <Cmd>Ddu buffer -ui-param-startFilter=v:false<CR>
nnoremap g<Space> <Cmd>Ddu rg -ui-param-startFilter=v:true<CR>
'''
hook_source = '''
call ddu#custom#patch_global({
    \  'ui': 'ff',
    \  'volatile': v:true,
    \  'sources': [
    \    {'name': 'file'},
    \    {'name': 'file_rec'},
    \    {'name': 'buffer'},
    \    {'name': 'register'},
    \    {'name': 'rg'},
    \  ],
    \  'sourceOptions': {
    \    '_': {
    \      'matchers': ['matcher_substring'],
    \    },
    \    'file_rec': { 'matchers': ['matcher_substring', 'matcher_hidden'] },
    \    'rg': { 'matchers': [] },
    \  },
    \  'kindOptions': {
    \    'file': {
    \      'defaultAction': 'open',
    \    },
    \  },
    \  'uiParams': {'ff': {
    \    'ignoreEmpty': v:false,
    \    'autoResize': v:false,
    \  }},
    \})
'''

[[plugins]]
repo = 'Shougo/ddu-commands.vim'
on_source ='ddu.vim'
on_cmd = 'Ddu'

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
hook_add = '''
autocmd FileType ddu-ff call s:ddu_ff_my_settings()
function! s:ddu_ff_my_settings() abort
  nnoremap <buffer> <CR>
  \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer> <Space>
  \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer> i
  \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
  nnoremap <buffer> q
  \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction
autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  inoremap <buffer> <CR>
  \ <Esc><Cmd>call ddu#ui#ff#close()<CR>
  nnoremap <buffer> <CR>
  \ <Cmd><Cmd>call ddu#ui#ff#close()<CR>
endfunction
'''

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-register'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'
on_source = 'ddu.vim'

# ============================================================================
# Complement
# ============================================================================
[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'statiolake/ddc-ale'
on_source = 'ddc.vim'

[[plugins]]
repo = 'dNitro/vim-pug-complete'
on_ft = ['pug', 'jade']

[[plugins]]
repo = 'rhysd/github-complete.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

# -------------------
# Language Server
# -------------------
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
call ddc#custom#patch_global('sources', ['around', 'buffer', 'file', 'nvim-lsp', 'ale'])
call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \ 'matchers':   ['matcher_head'],
    \ 'sorters':    ['sorter_rank'],
    \ 'converters': ['converter_remove_overlap'],
    \ },
    \ 'around':   {'mark': 'Around'},
    \ 'buffer':   {'mark': 'Buffer'},
    \ 'file':     {'mark': 'File', 'isVolatile': v:true, 'forceCompletionPattern': '\S/\S*'},
    \ 'nvim-lsp': {'mark': 'LSP', 'forceCompletionPattern': '\.\w*|:\w*|->\w*'}
    \ })
call ddc#custom#patch_global('sourceParams', {
    \ 'around': {'maxSize': 500},
    \ 'buffer': {
    \     'requireSameFiletype': v:false,
    \     'limitBytes': 5000000,
    \     'fromAltBuf': v:true,
    \     'forceCollect': v:true,
    \   },
    \ 'ale': { 'ale': {'cleanResultsWhitespace': v:false} }
    \ })
call ddc#custom#patch_filetype(
    \ ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
    \ 'sourceOptions': {
    \   'file': {
    \     'forceCompletionPattern': '\S\\\S*',
    \   },
    \ },
    \ 'sourceParams': {
    \   'file': {
    \     'mode': 'win32',
    \   },
    \ }})

call ddc#custom#patch_global('ui', 'native')

set completeopt-=preview

inoremap <silent><expr> <TAB>
\ pumvisible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'

call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
on_ft = ['ruby', 'slim', 'html', 'css', 'scss', 'javascript']
depends = 'ddc.vim'
hook_source = '''
lua << EOF
local lsp_installer = require("nvim-lsp-installer")
lsp_installer.on_server_ready(function(server)
  local opts = {}
  server:setup(opts)
end)
EOF
'''

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'

# ============================================================================
# Syntax
# ============================================================================
[[plugins]]
repo = 'othree/html5.vim'
on_ft = [ 'html', 'vue' ]

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css', 'scss', 'sass', 'vue']

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = ['jsx']

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = 'scss'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = ['slim']

[[plugins]]
repo = 'tpope/vim-haml'
on_ft = ['haml']

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ['pug', 'vue']

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = [ 'toml' ]

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['css', 'scss', 'html', 'vue']
hook_add = '''
let g:user_emmet_settings = {
\  'variables': {'lang': 'ja'},
\  'html': {
\    'default_attributes': {
\      'option': {'value': v:null},
\      'textarea': {'id': v:null, 'name': v:null, 'cols': 10, 'rows': 10},
\    },
\    'snippets': {
\      'html:5': "<!DOCTYPE html>\n"
\              ."<html lang=\"${lang}\">\n"
\              ."<head>\n"
\              ."\t<meta charset=\"${charset}\">\n"
\              ."\t<title></title>\n"
\              ."\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
\              ."</head>\n"
\              ."<body>\n\t${child}|\n</body>\n"
\              ."</html>",
\    },
\  },
\}
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown', 'md']
hook_post_source = '''
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
'''
